// This file is generated. Do not edit.
// Generated on: 17.09.2020 15:00:00

#include "tensorflow/lite/c/builtin_op_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 6328;
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[13];
TfLiteEvalTensor evalTensors[13];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const ALIGN(8) int32_t tensor_data0[8] = { 42, -31, -64, -33, -42, -49, -15, 4, };
const TfArray<1, int> tensor_dimension0 = { 1, { 8 } };
const TfArray<8, float> quant0_scale = { 8, { 4.6158500481396914e-05, 1.9621571482275613e-05, 2.7282801966066472e-05, 2.5295681552961469e-05, 2.6242381863994524e-05, 2.7021895220968872e-05, 1.9558960048016161e-05, 2.1527004719246179e-05, } };
const TfArray<8, int> quant0_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[8] = { 6, 18, 0, 0, -17, 2, -14, -50, };
const TfArray<1, int> tensor_dimension1 = { 1, { 8 } };
const TfArray<8, float> quant1_scale = { 8, { 1.4872761312290095e-05, 1.6608864825684577e-05, 1.5991396139725111e-05, 1.4795337847317569e-05, 3.1988129194360226e-05, 1.6838082956383005e-05, 1.8721771994023584e-05, 3.5876048059435561e-05, } };
const TfArray<8, int> quant1_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[4] = { -657, -367, 533, 490, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const TfArray<1, float> quant2_scale = { 1, { 4.7482128138653934e-05, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const TfArray<4, int> tensor_dimension3 = { 4, { 1,25,20,8 } };
const TfArray<1, float> quant3_scale = { 1, { 0.12498085200786591, } };
const TfArray<1, int> quant3_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const TfArray<4, int> tensor_dimension4 = { 4, { 1,4,3,8 } };
const TfArray<1, float> quant4_scale = { 1, { 0.075152590870857239, } };
const TfArray<1, int> quant4_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const TfArray<2, int> tensor_dimension5 = { 2, { 1,1960 } };
const TfArray<1, float> quant5_scale = { 1, { 0.10171568393707275, } };
const TfArray<1, int> quant5_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const TfArray<4, int> tensor_dimension6 = { 4, { 1,49,40,1 } };
const TfArray<1, float> quant6_scale = { 1, { 0.10171568393707275, } };
const TfArray<1, int> quant6_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[4] = { -1, 49, 40, 1, };
const TfArray<1, int> tensor_dimension7 = { 1, { 4 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,4 } };
const TfArray<1, float> quant8_scale = { 1, { 0.020623985677957535, } };
const TfArray<1, int> quant8_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[4*96] = { 
  16, -20, 11, 5, 5, -18, -1, 11, 18, -24, 8, 11, -3, -4, 1, 7, -29, 21, -1, 12, 2, -1, 4, -10, -88, 8, -1, 1, 2, -4, 13, -22, -92, 1, -2, -5, -5, 11, 11, -18, -46, 1, -3, -10, -1, -4, 20, -18, -127, -18, -6, 4, 0, 3, -13, -7, -127, 1, 11, 34, 23, 14, 1, -2, -91, -7, -16, -10, -9, -21, -17, 2, 59, 33, 103, 3, 66, 39, -17, 7, 53, 0, 97, -3, 93, 50, 1, 0, 20, 3, 28, 6, 24, 25, 16, 24, 
  10, -4, 12, 12, 7, -15, -2, 9, -4, 7, 5, 9, -5, -11, -24, -10, -1, 4, -11, 2, -8, -14, 10, -2, 26, 0, 7, 20, 10, 6, -10, -6, 16, 5, -2, 2, -1, 16, -21, 1, 23, 9, -26, -19, -15, -20, -6, -19, 42, 21, 2, 11, 5, 16, -4, 2, 36, -21, 21, -7, 23, 22, -8, -2, 2, -3, -41, -40, -31, -36, 0, 2, -2, 20, -30, 29, -29, 4, 1, 2, -30, -7, -15, -7, -8, -32, 26, -2, -43, -24, -8, -29, -34, -10, 10, -16, 
  12, -27, 9, 8, 5, -16, 17, 15, 1, 6, 5, 8, -4, -7, 21, 7, 7, 19, -4, 12, -1, -6, -7, -5, 50, -3, -6, -13, -4, -15, -16, -23, 26, 23, -11, -12, -12, 3, 3, -8, -30, -11, 37, 44, 24, 23, -2, -4, 25, -23, -32, -30, -37, -44, 9, -16, 37, -14, -18, -22, -4, -15, -5, -13, 79, -6, 85, 67, 68, 67, -1, 27, -40, -4, -45, -2, -39, -17, -12, -21, -24, 10, -37, 11, -53, -38, -17, -2, 18, -19, 3, -8, 34, -13, -23, -12, 
  6, 20, 18, 19, 14, -10, -23, 7, 16, -2, 2, 9, -2, -9, 7, 5, -5, 3, -7, 4, -5, -11, 22, -1, 53, -13, 13, 28, 15, 16, -8, 25, 34, 24, -15, -17, -13, 5, -16, 3, 29, 0, -14, -16, -7, -11, 14, 5, 61, 1, 11, 13, 18, 32, -21, 31, 32, -15, -7, -9, -1, 0, 15, 0, -1, -9, -22, -15, -18, -20, 14, -2, -12, 5, -43, -13, -34, -16, -20, 13, -24, -14, -17, -13, -31, -39, -1, -28, -20, 6, -14, 17, 2, -2, -7, -7, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 4,96 } };
const TfArray<1, float> quant9_scale = { 1, { 0.00063180958386510611, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[1*10*8*8] = { 
  /* [0][0][][] */ 80,-104,-43,22,-40,-29,-49,-39, 39,22,71,-47,28,10,1,29, -7,14,17,108,42,119,-6,46, -59,84,106,30,18,69,-42,-6, 92,55,-76,71,23,10,80,9, -13,84,127,-88,-22,2,25,7, -24,-70,70,-8,-25,111,21,-1, -34,-40,-19,-68,41,10,117,13, 
  /* [0][1][][] */ -53,66,-102,37,20,-17,2,-12, 49,92,-37,15,41,2,-107,-14, 12,11,-34,109,-1,12,41,5, -37,-56,18,-102,9,-74,16,31, -57,75,-92,-10,4,69,-9,31, 25,-33,8,102,58,11,62,40, -10,-6,-84,-126,6,-68,-23,-11, -57,-38,-76,29,10,-38,14,11, 
  /* [0][2][][] */ 50,17,13,-1,-4,-100,68,19, 20,99,21,12,52,28,5,6, 13,28,1,-23,33,-58,37,51, 78,25,39,-42,39,91,16,37, -10,-18,32,6,29,-25,127,28, -19,-64,104,5,25,22,-60,59, -25,-94,6,0,33,36,10,-11, 113,-46,6,-69,64,93,83,-7, 
  /* [0][3][][] */ -35,49,-42,-79,15,94,-61,25, 18,-34,13,32,14,-23,-48,21, 100,-35,-24,18,6,-89,110,75, 68,-98,-18,-80,41,-90,94,59, -18,-91,-103,12,39,-27,33,95, 29,-85,-5,-64,28,5,43,23, -127,-35,-107,-49,-1,-6,96,24, -24,-29,2,36,87,45,108,75, 
  /* [0][4][][] */ 64,-9,-74,-125,77,-87,33,72, 56,67,-54,70,24,-67,1,24, 38,18,25,-114,31,-12,37,100, -81,106,48,-51,91,-71,-53,83, 50,4,-17,-66,22,3,83,63, -32,-52,-91,21,80,16,34,77, -78,-7,24,-6,-31,-36,62,46, 41,8,-38,53,53,85,25,57, 
  /* [0][5][][] */ 54,-15,39,-8,7,-81,-52,59, -64,-71,60,11,30,-12,69,60, -50,-122,7,92,20,-91,-9,97, -126,67,-56,17,102,-75,10,79, -72,-9,-112,-85,57,-86,100,95, -108,-127,22,-114,43,53,65,104, 87,-94,50,-72,65,-8,22,4, -43,12,-77,68,52,80,116,15, 
  /* [0][6][][] */ 22,-25,-47,-22,83,53,102,103, 37,17,-14,-91,66,31,113,108, 91,-80,-23,49,53,59,116,115, 58,13,-33,-60,68,-21,29,17, 64,-111,51,-123,65,-55,125,96, 86,84,-37,6,39,-54,-50,63, -40,56,-27,127,73,7,15,75, -64,69,-81,-64,42,51,19,79, 
  /* [0][7][][] */ -69,71,-25,-39,45,-37,94,102, -31,-9,60,10,39,-5,41,92, -26,7,125,60,56,-49,29,83, -16,17,60,12,40,-22,-21,62, 41,-51,-96,53,42,-76,83,77, -65,36,-50,12,93,30,33,92, -45,-43,-126,-32,72,-46,29,48, -11,3,-45,11,37,-115,23,-4, 
  /* [0][8][][] */ 38,-34,29,-63,25,32,91,78, 114,61,33,-3,58,41,-22,58, -65,-63,94,6,74,2,28,109, 120,14,-26,30,100,-16,-40,67, -90,50,-2,-93,127,35,89,127, 55,-96,-74,-48,111,-127,117,19, 56,-49,33,106,56,-44,53,80, -7,-62,-20,-26,88,-31,69,90, 
  /* [0][9][][] */ -102,69,-91,-52,89,-12,30,65, 1,-115,-33,53,73,35,58,14, 7,-110,22,-45,117,67,59,117, -14,17,22,53,75,-44,-9,43, -23,-56,70,9,87,8,67,117, -35,-49,11,-12,36,48,-5,29, -34,-18,79,-26,64,-51,23,120, 45,22,-62,-118,85,-51,112,20, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,10,8,8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00014621895388700068, 0.00016328715719282627, 0.00015721662202849984, 0.0001454577868571505, 0.00031448571826331317, 0.00016554068133700639, 0.00018405984155833721, 0.00035270911757834256, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const TfArray<2, int> tensor_dimension11 = { 2, { 1,4 } };
const TfArray<1, float> quant11_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[8*10*8*8] = { 
  /* [0][0][][] */ -30,20,-4,-6,-16,-5,32,3, -13,34,-14,-10,17,-19,49,37, -53,-33,14,22,27,-16,58,39, -10,8,-32,28,53,0,56,56, -33,53,9,23,37,0,3,63, -16,-13,-12,0,35,22,7,28, -35,-10,-13,-27,-4,37,-16,24, -21,-38,29,12,18,-7,30,26, 
  /* [0][1][][] */ 31,20,13,-5,18,2,37,32, 43,0,15,20,16,-35,-15,38, -12,-53,-2,-20,40,-45,-20,41, -2,-2,6,3,41,28,33,41, -20,10,8,29,39,-44,13,31, 6,-17,45,42,42,-17,42,22, -16,-4,15,18,22,-18,-25,9, -16,1,-35,40,32,14,14,28, 
  /* [0][2][][] */ -13,0,27,33,31,-7,40,42, -27,27,-17,-19,-1,-13,38,19, 17,20,18,9,18,3,-6,24, -7,-1,-3,-26,42,-4,29,38, -1,-7,-30,-40,13,2,-27,30, -14,-19,10,44,56,36,47,33, -20,-49,12,-30,5,-17,24,42, 17,-32,22,21,23,38,-4,11, 
  /* [0][3][][] */ 0,-5,9,24,31,-48,14,11, 15,9,39,-6,-11,8,44,37, 14,8,5,-19,29,-2,41,43, -8,-7,31,-34,5,15,23,55, 13,21,-24,40,41,4,-23,27, 10,-14,8,-50,46,-16,52,31, 23,-1,-18,23,-1,10,37,36, -12,-3,37,16,6,16,32,19, 
  /* [0][4][][] */ 13,-6,3,5,-1,23,-17,-19, -33,11,31,-8,10,0,-15,29, 2,-47,-20,-24,-20,16,3,-3, 9,47,4,4,13,22,4,12, 17,23,38,34,-23,-8,3,26, 11,-13,32,20,0,19,-4,46, 16,-19,34,7,18,26,35,27, -6,9,8,-4,-40,-16,46,25, 
  /* [0][5][][] */ -20,13,3,-15,13,6,-17,-35, -23,-1,24,-31,8,-33,32,-14, -26,29,-19,4,-10,9,-19,-34, -29,7,-28,-3,-9,18,18,-30, 0,-7,-14,-15,-23,51,-16,-2, -53,16,14,53,-34,41,-16,6, 17,-27,33,22,-4,38,-40,-10, 3,19,-27,-9,2,12,-12,-13, 
  /* [0][6][][] */ -12,40,-26,-8,-46,4,-30,4, 16,16,16,10,-40,30,33,3, 0,5,22,-14,-60,-18,-15,-34, 18,-44,-26,4,-64,21,-34,-33, -46,30,-8,-1,-44,-1,14,-18, -3,7,-28,4,-47,-5,-31,3, -18,17,-9,-14,-17,-15,-15,-26, 0,-41,-17,-29,-26,28,-34,-43, 
  /* [0][7][][] */ 0,35,36,25,-15,19,18,-49, 5,-15,3,-17,-55,-21,-10,-34, -9,31,-31,-22,-62,17,18,-82, 2,38,10,29,-33,-36,-17,-74, -35,-18,15,-22,-30,-39,1,-58, 16,16,-31,17,-22,3,-34,-59, -4,-33,1,12,-31,-39,-19,-36, 28,33,27,26,-22,-33,-8,-44, 
  /* [0][8][][] */ 48,-8,21,-32,-51,-2,-1,-58, 5,48,-23,26,-64,2,-22,-47, 3,19,5,-7,-66,44,-52,-76, 13,6,14,-2,-104,-12,-24,-82, -4,-26,-18,28,-91,32,15,-91, -22,-12,-32,-9,-55,-25,-24,-92, -9,5,21,-4,-18,-47,-43,-85, -16,-1,8,8,-40,-6,17,-56, 
  /* [0][9][][] */ 21,25,17,-39,-64,-5,19,-73, -1,20,-3,-22,-83,40,-62,-56, 10,24,-33,-1,-87,5,-22,-80, 5,-23,17,-32,-70,42,-57,-106, 16,2,-27,-11,-96,47,-42,-94, -11,-7,17,3,-62,-4,-18,-127, 38,41,-4,32,-46,28,-31,-103, -7,-7,10,10,-45,21,-18,-72, 
  /* [1][0][][] */ -79,57,65,17,-37,-32,76,59, -14,-12,-80,19,40,63,13,31, -103,1,81,-91,-6,-9,88,-9, 6,1,-37,72,30,69,74,-65, 29,30,-73,-34,47,-36,17,-70, 26,-108,17,-76,4,-11,16,-42, -8,-17,31,93,-12,36,-96,55, 35,10,6,40,-94,-80,9,29, 
  /* [1][1][][] */ 19,37,97,12,-127,60,68,-26, 20,-62,-44,38,33,32,-69,27, 86,0,24,-109,75,-97,-70,-60, -105,-38,-8,11,9,3,-102,-103, -33,-5,110,-66,84,84,37,10, -118,-2,18,-30,-56,-47,57,10, -75,122,29,69,-13,-42,-11,98, -12,56,-24,-86,1,22,-111,-102, 
  /* [1][2][][] */ -34,30,4,5,44,28,78,6, 49,31,-46,-53,-17,-6,-6,-43, -12,-26,-22,81,5,65,6,-45, -32,107,18,69,35,2,-25,-112, 35,-60,54,17,98,45,-19,-50, 2,105,-4,40,-103,-43,16,-16, 107,88,-22,59,-15,-80,-54,108, 83,45,51,34,-67,62,68,49, 
  /* [1][3][][] */ -17,-69,-56,-34,-81,-36,52,107, -51,-97,-22,-22,-41,-62,-40,-21, -40,5,-70,96,54,-14,-7,16, -7,61,-9,81,-13,-23,-110,-55, -13,-27,-76,12,-12,-97,66,38, -123,30,-102,-47,15,-53,37,50, 0,-37,111,4,26,47,10,-27, -57,25,-32,0,-12,7,34,0, 
  /* [1][4][][] */ -6,-108,-42,6,27,55,-25,-110, -23,24,29,-42,29,80,-33,-84, 95,-39,1,116,-27,-18,71,-26, 38,15,72,47,106,-16,-12,7, -77,-1,-18,-43,1,-7,-7,2, 26,21,-71,1,57,-55,37,34, -37,-24,-2,-122,-85,-45,-102,-71, -124,-9,29,-18,-4,-72,27,-60, 
  /* [1][5][][] */ 43,56,-95,-12,11,-108,5,53, 119,74,-71,44,-55,-42,-28,-77, 63,-20,124,60,-47,102,51,55, -44,-10,-54,-20,-25,97,-76,-27, -15,51,-40,-20,27,86,-13,-26, -50,76,78,-96,-108,-36,-36,-114, -86,17,-53,-3,38,42,63,46, -22,53,26,100,-16,36,40,-82, 
  /* [1][6][][] */ 94,14,9,-42,82,42,-110,11, -15,-66,-64,60,26,32,11,-126, 124,51,91,-34,19,-16,-32,-64, 29,-46,22,5,-112,-16,-51,2, 25,51,27,22,22,64,-22,-35, -104,3,43,90,-57,-17,58,-114, 4,-28,-92,39,-63,-35,38,-41, -73,-41,30,-40,-38,83,-111,-19, 
  /* [1][7][][] */ 44,80,52,16,37,-23,-39,62, 56,7,-7,83,41,-2,-21,64, 58,-91,-75,-59,52,-20,-44,-68, 112,-11,-27,-67,-33,87,25,-63, 11,-54,-59,124,46,-79,110,33, -77,107,-33,21,-6,-7,0,90, 107,30,-119,17,-82,85,4,-50, 42,-57,-19,26,99,-44,-94,27, 
  /* [1][8][][] */ -1,2,22,-18,100,12,91,-125, 98,49,24,-23,-59,-11,-25,-54, 41,-61,-100,71,95,-39,-27,16, -12,17,-15,8,35,-29,-72,-7, -7,-45,-37,109,20,85,20,67, 39,4,-10,-118,-15,13,51,-83, -46,19,-5,18,15,-19,-90,23, -7,-41,-3,-24,-33,-86,112,-76, 
  /* [1][9][][] */ 7,-116,-94,22,-17,29,42,-11, -91,-38,86,64,48,30,-33,-38, -19,-58,-31,-26,13,-24,-46,13, -12,-72,1,-107,-47,-92,48,1, 45,-63,-50,6,63,42,7,73, -64,-47,74,-21,-94,-10,42,49, -2,17,77,9,25,-11,-33,30, 81,-12,32,-103,-87,57,52,101, 
  /* [2][0][][] */ 35,30,-2,-12,6,-41,-22,-68, -5,47,42,73,-44,-65,-50,-8, 39,-26,62,-55,-32,5,31,-33, 34,-15,4,17,-13,-57,57,-45, -58,-61,27,12,-35,-57,26,-4, 33,26,-12,29,0,-75,16,-3, 12,30,15,-6,-18,-38,-19,-35, -5,1,-34,40,26,7,-42,-4, 
  /* [2][1][][] */ -35,16,-14,4,-13,57,-4,-95, -4,-10,51,-39,24,59,78,-89, 39,-18,10,71,-18,-4,-77,24, 10,-36,-37,-3,68,-60,-25,11, -22,44,10,-57,79,-56,30,18, 1,-25,35,44,31,-1,20,11, -30,-23,10,-29,55,3,-73,25, 45,-11,-7,-5,1,-16,38,7, 
  /* [2][2][][] */ 9,23,6,-14,-12,20,17,-50, -43,-45,72,20,-62,-44,7,-2, -45,-5,-40,-12,62,-34,23,52, -30,-15,61,14,61,42,34,83, -55,-19,22,-32,6,52,86,48, -1,-49,-49,15,68,29,-48,126, 6,54,-40,14,59,-62,-3,83, 24,22,18,-24,37,56,-89,78, 
  /* [2][3][][] */ 21,-29,-69,-19,-79,13,-24,-86, 61,28,0,32,-13,-64,-70,10, 84,3,8,-20,39,-13,38,-7, -56,10,23,86,-26,-1,37,127, 12,21,-10,31,62,-2,-18,74, -60,-4,-57,78,5,30,37,68, -4,-8,56,-71,64,-24,-60,72, -17,-2,-56,-23,15,0,13,98, 
  /* [2][4][][] */ 28,85,-71,81,-17,-61,-18,-29, 4,45,-38,17,-27,61,-3,-18, -38,19,43,41,96,22,21,28, 18,-64,-27,-3,85,-40,66,71, 7,-32,42,4,97,14,9,80, -58,4,0,-26,93,18,-27,97, 31,-33,30,-69,45,-71,-2,-9, -46,2,58,-15,0,33,-26,-42, 
  /* [2][5][][] */ 34,-87,-5,62,-91,-18,-36,-107, -23,-1,-30,-8,-18,16,-19,8, -85,-4,44,33,-7,-66,-61,24, -19,-65,49,-52,-6,41,14,32, 35,0,-14,-5,44,-46,16,87, 55,-4,-26,38,-24,-33,-12,1, 48,-10,3,-25,11,14,23,28, -58,-33,21,-14,-30,15,-32,-18, 
  /* [2][6][][] */ -53,38,0,7,-99,-68,-8,-54, -12,-50,14,27,-50,17,-16,-54, -52,-60,19,-36,-13,36,-24,37, 22,50,-27,17,29,-13,51,56, 52,30,-13,60,65,-42,-19,117, -5,-56,-42,58,73,-9,5,57, 76,-51,19,18,-29,-2,-20,-18, 76,-6,-42,46,-13,-10,14,-39, 
  /* [2][7][][] */ 30,-56,-77,3,-35,-49,58,-114, 33,62,-41,43,-28,2,48,0, -19,-66,-3,33,4,33,-36,58, 12,-24,-5,63,80,-51,3,111, -71,-16,40,32,-7,-12,35,96, -64,-8,9,15,45,-8,-43,67, 56,52,86,15,5,26,2,-22, -80,55,24,-66,-68,-56,71,-38, 
  /* [2][8][][] */ -56,12,33,-53,-54,71,-31,-17, 39,-50,38,35,-76,0,67,0, -58,-66,52,15,74,-75,66,66, 21,14,52,60,57,2,67,27, -30,-7,-22,-54,48,-79,87,97, 39,-33,13,28,56,52,56,83, 40,-84,44,-42,-48,67,62,48, -61,50,-3,51,8,-8,-64,-5, 
  /* [2][9][][] */ -55,-80,-33,-38,-73,-67,21,-45, -58,49,-70,26,10,-33,24,10, 38,-37,-18,-28,-31,48,-34,58, -50,-66,-24,25,51,-50,-53,62, 75,64,39,48,51,-40,11,58, -64,-8,42,23,-50,47,-14,80, 41,80,-40,20,19,-34,5,48, -2,-16,-46,76,35,-55,-35,-14, 
  /* [3][0][][] */ 46,36,-97,-11,-40,6,-22,-13, 38,10,-21,8,25,3,-54,-20, -7,49,85,24,-42,74,27,-41, -41,-36,57,-5,-51,-1,-13,-6, -12,-46,-5,55,-21,-24,-13,-20, -42,-28,65,1,77,23,-33,-16, -22,67,44,43,65,35,37,-46, 34,30,25,-14,24,9,63,-22, 
  /* [3][1][][] */ -86,-40,-51,60,28,-20,12,-35, 37,-46,-44,15,10,13,21,35, -14,-38,13,27,20,33,-4,-78, 47,-6,27,51,-42,-17,-63,16, 52,-24,10,45,-18,37,2,12, -16,15,40,-13,20,-1,-37,-62, -67,2,26,2,22,-34,38,9, 20,14,72,14,-34,-6,1,30, 
  /* [3][2][][] */ 4,14,-19,-29,45,50,33,-6, -15,9,13,3,26,-96,-88,-56, 32,80,2,4,26,-17,-18,22, 12,0,-17,-60,87,10,41,35, -43,-47,-39,-40,-25,54,59,95, -36,1,-59,-48,12,-4,34,-42, 9,43,-27,12,-13,-85,-60,-37, 31,28,-12,8,11,3,-59,-8, 
  /* [3][3][][] */ -93,56,25,-67,26,53,-42,-49, 39,25,-5,73,-51,17,-2,-63, 3,93,-89,-50,45,-34,72,50, -71,43,10,-7,70,43,16,9, 60,-7,-18,69,30,18,-34,49, 18,-10,6,-53,67,59,-45,3, -11,-10,33,54,63,-64,-18,26, -45,92,-35,-82,11,75,79,0, 
  /* [3][4][][] */ 34,-36,-51,25,-79,-10,-40,18, 11,9,79,19,47,66,-6,-63, 44,64,23,11,-46,44,44,-13, -46,-94,-17,79,5,-40,87,24, -24,-41,8,87,28,-47,-59,-15, -19,-11,-32,84,44,17,-34,54, -19,4,25,7,-85,-19,-57,13, 34,-47,-29,32,-12,-8,15,-13, 
  /* [3][5][][] */ 47,-9,29,-7,53,-76,-98,-107, -2,55,-3,-41,55,13,-9,42, 4,-77,-45,45,-36,1,65,-4, 45,-17,-64,32,88,29,41,27, 21,-49,25,-24,-13,-26,19,21, 42,17,-42,52,5,-42,12,52, -11,9,-17,-79,-4,-5,-63,-13, -59,-8,-87,30,-22,-43,-46,-66, 
  /* [3][6][][] */ 31,-33,94,-38,-75,26,-26,-47, 13,43,-90,-34,-7,-58,-13,37, -73,-26,69,-13,36,35,10,94, 45,23,32,-15,36,-43,-61,47, 52,36,-6,93,31,-53,4,18, -23,17,-24,-7,12,31,82,102, 72,-22,16,-58,74,-29,38,-10, -23,-21,-5,8,3,1,16,17, 
  /* [3][7][][] */ -67,39,53,-42,-8,-93,-74,-49, 20,30,-18,11,35,50,-29,-31, -39,21,8,63,63,-21,-18,66, -10,20,-11,-8,48,44,88,71, 14,51,58,-49,87,-64,84,28, 45,17,-68,-6,8,-6,17,-26, -22,6,-64,60,-7,3,-36,-18, -59,23,-28,69,2,-99,-36,64, 
  /* [3][8][][] */ 12,-27,69,-40,20,21,7,11, 88,-3,5,55,67,60,29,41, -42,0,63,56,49,33,68,79, 2,-36,36,38,81,35,-21,19, 46,-47,26,45,127,-34,99,97, 29,9,90,43,22,-29,-41,40, -44,-59,-76,24,78,6,-29,-35, 44,-54,-25,17,-77,18,4,3, 
  /* [3][9][][] */ 23,28,3,20,-30,23,66,36, 28,76,-18,90,-42,55,74,-18, -1,-59,78,-53,-8,4,47,47, 1,-71,1,-67,26,43,11,116, 78,27,-7,-75,51,1,48,14, 15,-10,-43,-60,87,-15,22,61, -20,65,-11,26,37,-13,-29,58, 19,-1,-6,-41,56,18,30,38, 
  /* [4][0][][] */ -62,12,26,14,-7,-54,1,-42, -33,-39,49,-56,-46,-7,4,-35, 2,-32,-51,10,-32,-39,74,-5, 17,-51,31,-43,49,4,37,7, -16,-7,-32,-8,49,50,-26,39, 22,62,28,-63,2,8,-7,7, 33,46,-11,30,-14,-20,31,-40, 15,-47,9,-15,-32,11,-17,-81, 
  /* [4][1][][] */ -86,-65,-15,-8,-43,25,7,-9, 55,-28,-50,11,-83,80,85,-14, -95,-55,1,-69,-5,30,31,59, 76,-9,52,28,21,-68,11,47, -60,30,-12,-28,67,-64,14,-12, -55,-69,-11,7,37,-36,17,46, 47,81,-36,-12,38,13,-6,24, 60,-66,20,12,-24,-32,-81,28, 
  /* [4][2][][] */ -43,12,-25,-36,44,1,-4,-45, 42,-50,80,0,-13,0,92,7, -8,43,-31,-22,113,-27,-12,17, 5,38,-16,11,41,81,40,62, 39,-58,15,8,44,20,-2,76, 16,67,18,10,58,-18,-21,62, -27,-1,-8,8,76,-26,-47,100, 3,-85,7,48,30,-9,27,-10, 
  /* [4][3][][] */ -39,22,-64,43,-21,-28,38,-58, 3,-12,12,-52,18,44,-35,58, -54,-44,38,19,-7,-47,6,32, -42,-8,-10,81,53,74,36,65, -18,-27,-47,-77,47,60,84,49, 76,-13,21,-64,88,-31,-60,74, -10,20,16,-30,33,15,44,70, 19,-6,-47,-9,-2,73,-17,-64, 
  /* [4][4][][] */ 26,1,86,76,-46,-14,-3,-122, 14,-44,-62,29,10,6,-37,-20, -3,61,-80,7,-60,13,-40,29, 10,37,-42,-55,27,-21,-40,64, -30,43,9,-72,50,14,-6,0, 16,-86,1,31,63,38,39,82, 65,-16,-1,-14,53,27,50,44, 18,-26,8,-16,-25,16,-62,-89, 
  /* [4][5][][] */ 22,45,-28,69,-16,-14,-2,-127, 27,54,-62,-11,13,-79,19,34, -34,-36,69,-51,-22,33,47,-19, 11,-45,-6,-24,-13,-10,17,45, 25,57,-7,33,-61,3,34,25, 5,-27,-90,20,4,12,55,30, -26,-76,-11,27,14,-43,53,-72, 30,-21,-79,-67,7,79,20,-9, 
  /* [4][6][][] */ -31,24,3,50,-35,-15,-1,-43, -33,2,11,29,11,-13,-35,-59, -17,32,-17,35,27,16,59,76, 44,-45,-68,67,76,4,47,50, -18,-30,-69,-80,65,60,63,120, -20,-26,42,-22,73,-27,52,18, -63,-42,-16,-70,-6,-32,-55,40, 41,55,-20,0,6,-80,24,-58, 
  /* [4][7][][] */ -88,-61,-37,53,41,36,55,7, -95,61,30,-40,-63,24,45,35, -16,-4,53,-81,45,-48,91,50, -11,-26,-6,-60,82,46,70,90, 28,-21,-56,-75,7,10,41,-3, 3,-8,-42,-41,63,-26,27,116, 25,-40,-48,19,-26,58,-15,-71, 59,-19,39,5,24,14,-20,-47, 
  /* [4][8][][] */ 62,13,35,-6,-64,16,-60,-101, 76,34,-91,-6,56,23,-21,-48, -62,82,-25,-62,-8,-7,-22,-29, -49,2,-9,7,68,-67,47,42, 40,51,-91,-35,-7,-10,63,67, -17,34,47,-33,51,59,30,97, -39,39,50,13,33,14,-73,70, 16,55,14,-5,-17,59,-47,5, 
  /* [4][9][][] */ -29,-40,-34,-92,-28,17,-65,21, 0,20,-43,-25,1,-12,-41,9, 26,-47,-28,18,16,-4,-50,117, -27,71,-59,-2,-35,7,100,97, 18,9,28,-5,-17,-16,89,45, 78,50,-24,3,62,63,23,56, 50,-15,-21,-9,101,-77,-26,9, -52,37,16,11,44,33,41,54, 
  /* [5][0][][] */ 30,-22,-6,75,-39,-77,-15,3, -34,26,-1,-70,-32,-22,-68,-76, -51,-24,70,16,30,61,-22,39, 40,64,-32,-19,-37,-32,39,2, 13,-82,-9,-35,18,36,-12,-74, -46,83,-35,-73,-8,-31,-9,-14, -33,37,28,-44,1,37,4,-36, -18,-37,-2,28,-10,28,30,8, 
  /* [5][1][][] */ 36,3,63,-15,26,40,6,-26, -47,4,28,19,-13,23,-33,39, -76,83,-10,52,31,-50,4,-65, 5,-17,-38,4,38,-13,6,31, -18,24,-14,-31,66,42,48,1, -19,-25,10,80,50,-30,15,63, -52,-4,11,32,-29,-47,67,22, -56,-33,-10,14,20,-23,36,-68, 
  /* [5][2][][] */ -2,51,18,44,-30,1,-9,-20, 20,-5,48,-31,15,78,-30,54, -40,-51,-6,-9,25,14,8,46, 89,15,-71,-17,42,15,77,-36, -6,81,39,-67,51,-23,-21,21, -36,17,-10,-72,59,-16,-49,28, 61,-2,-47,14,45,69,-3,30, 56,-77,25,38,-43,-7,5,-2, 
  /* [5][3][][] */ 77,-56,71,10,1,32,27,-68, 4,37,0,38,19,48,45,-9, 89,18,-67,-21,23,-63,-8,82, -29,2,50,-56,88,-59,30,63, 58,-32,17,-21,49,-11,33,60, 63,-50,75,-11,33,-43,42,69, -2,21,49,-28,20,-42,36,-50, -6,-13,46,-31,-17,-6,-2,-17, 
  /* [5][4][][] */ -17,-52,-32,-49,-23,21,-6,-43, 10,-2,-34,-72,-39,44,7,50, 26,-33,30,10,53,-41,54,-9, -18,-10,4,-53,49,-15,-57,66, -41,54,37,-59,32,58,29,58, 29,24,-35,70,66,-72,-59,12, -23,-43,-40,-35,-2,13,-15,58, 23,31,51,-33,-39,-16,12,-19, 
  /* [5][5][][] */ -1,-6,66,4,-14,-17,-17,39, -32,32,-82,-5,35,-85,30,-38, -80,21,23,18,-35,-13,-3,17, 49,-31,1,-37,46,36,-41,33, 51,-22,-41,3,45,-1,40,30, 12,-10,55,-16,86,-4,-42,91, -76,-16,82,20,-1,32,-13,38, -6,-50,20,72,10,-44,-75,-82, 
  /* [5][6][][] */ 0,26,21,-59,-49,54,-41,-66, 16,-7,16,-7,0,28,23,61, -23,-12,-68,5,24,-7,-2,-2, 14,-78,29,-3,93,-43,-49,92, 47,-33,41,-26,9,46,-29,56, -16,-70,14,14,21,58,3,14, -14,23,17,13,27,28,3,-47, 52,-26,40,-49,2,-23,14,0, 
  /* [5][7][][] */ -51,20,23,-37,-108,11,-23,-56, 15,59,46,1,65,-30,91,-73, 31,-50,40,63,40,32,-29,2, 33,5,27,-29,30,-31,105,45, -36,16,39,-14,-17,58,56,120, 59,-26,-48,-21,28,26,20,127, -32,-19,-41,10,-46,-84,-65,74, -21,-57,-23,-36,-4,4,-74,-5, 
  /* [5][8][][] */ 45,-15,65,-13,-24,23,-39,-5, 5,24,57,-47,-15,-69,-45,-32, -35,-25,8,-57,2,77,45,26, -52,30,51,-46,92,-50,12,67, 18,15,21,-20,-19,-55,42,75, 48,-19,38,-59,47,10,-22,101, 70,-71,-6,-65,-40,66,-10,18, 56,50,19,-63,-31,-4,-42,-28, 
  /* [5][9][][] */ -18,10,-88,-54,5,13,-7,-47, -73,60,-22,-6,-2,-57,-67,23, 4,-4,-39,-57,-16,4,-4,-69, -36,28,-19,-29,42,39,5,54, -15,-37,-12,32,-24,90,31,102, 8,62,-60,42,-3,16,35,38, -17,66,25,-19,53,0,28,-49, -19,5,48,0,-56,17,50,43, 
  /* [6][0][][] */ -26,3,41,24,10,-13,-45,42, -80,40,17,-39,-14,-21,-62,71, -81,118,-61,-17,-70,64,-61,-56, -6,67,106,-65,0,20,10,2, 98,-22,-8,-20,8,78,-34,-112, 30,-25,39,18,6,30,-12,-18, -21,29,53,8,83,-7,102,-29, -83,-36,15,33,-10,-23,-23,16, 
  /* [6][1][][] */ -40,37,43,12,-93,-43,18,24, -17,-18,-42,12,-11,-28,62,5, 36,110,32,110,-38,-20,84,20, 36,-78,30,-97,-6,61,-106,-41, 8,-77,-93,1,28,30,-32,39, 47,30,-51,60,-26,88,-47,-33, 98,54,90,-29,-73,0,-65,55, 43,11,-26,-60,-29,17,8,46, 
  /* [6][2][][] */ 116,82,-50,38,-55,6,-35,-119, 99,54,19,-5,-15,-23,-17,-126, -84,83,-65,-10,79,34,-69,-88, -123,-1,-47,-39,-55,16,9,-29, -70,-16,33,-62,61,-127,-34,-15, 10,62,34,-26,-28,28,-27,12, -37,-49,-27,111,-19,35,-16,1, -25,-69,104,14,21,-42,19,-8, 
  /* [6][3][][] */ -37,-42,116,-19,-2,27,50,48, 94,-43,80,18,22,-22,60,33, -93,18,17,-54,12,38,66,70, -21,-84,22,-13,13,-2,33,-41, 30,99,-118,77,50,-21,109,47, 36,-30,-5,-55,-118,14,40,46, 110,0,18,109,10,2,10,-26, -53,-76,81,-90,-49,-37,45,45, 
  /* [6][4][][] */ 59,11,-55,105,-105,60,69,-20, -49,13,74,77,-76,6,69,-26, -88,-27,-57,-60,-69,-46,-11,-92, 53,10,-8,-47,-43,22,-2,-57, 15,44,-34,-51,-18,-61,-60,-103, -59,-2,-50,103,-37,14,24,-29, -15,-51,-23,-101,-22,52,-57,43, 27,-88,96,-48,20,-5,14,-51, 
  /* [6][5][][] */ -37,11,87,-10,41,-3,-38,82, -7,42,-34,68,13,-100,62,-77, 16,99,-46,-59,-93,-41,43,5, -10,37,0,-94,-14,36,62,-46, 35,3,31,-87,70,53,-52,11, -19,-79,10,-60,-70,87,-88,-23, -76,-73,68,33,-20,23,75,6, -58,-63,-46,-47,-90,14,-13,-63, 
  /* [6][6][][] */ -23,58,-23,94,13,63,-34,11, 79,-44,47,-1,27,-5,-58,12, -14,36,48,10,-29,16,54,2, 19,-63,-70,48,71,73,39,-68, 27,18,45,-41,-15,19,-20,-87, -40,-60,-30,-48,-119,8,-52,83, 42,37,25,-30,48,30,15,-56, -56,48,54,-28,6,84,124,-85, 
  /* [6][7][][] */ -59,88,5,-85,10,-23,-38,43, 99,-22,57,13,33,49,-85,-33, -71,-71,-3,-1,-113,-35,118,-106, -18,-57,96,4,-67,22,74,3, 61,-5,-16,-19,75,-32,44,-16, 43,-94,-2,40,50,34,1,-123, -19,62,31,89,-119,-43,0,123, 43,80,-49,22,74,-23,69,-55, 
  /* [6][8][][] */ 83,-74,-36,82,100,56,79,-4, 16,11,50,38,-47,-41,11,22, -34,68,29,-43,12,79,28,-22, -35,10,72,-28,-11,-1,82,-38, -31,124,59,-38,-66,91,-4,-32, 56,-66,-20,-82,22,33,12,-65, -74,19,3,-16,-11,10,14,59, 80,8,-40,-9,29,16,13,-72, 
  /* [6][9][][] */ -24,-103,50,-16,3,27,80,-11, -25,-24,-96,-51,-27,-72,30,28, 16,-27,-31,-44,-15,14,68,-81, -42,92,62,-19,-11,23,-31,95, 35,-69,19,-100,-64,-31,13,-9, 39,60,-78,80,-44,63,17,-22, 13,10,84,23,101,-14,-12,-35, -40,20,7,28,-29,67,-87,-2, 
  /* [7][0][][] */ -19,28,23,-43,-19,23,-68,-50, 48,-27,-3,4,-30,76,91,24, 91,-26,-3,-6,88,4,114,39, -3,-32,2,83,2,-51,-32,32, -38,-3,26,-53,25,5,-96,13, -3,-25,-33,-2,-8,-3,51,8, 18,75,-32,-66,28,114,-58,16, 29,102,-27,-36,14,-66,-103,35, 
  /* [7][1][][] */ -34,36,44,116,-107,-32,34,46, -17,13,-5,-42,-7,-43,-29,-92, -32,65,-18,-83,-7,-52,-55,-48, -50,40,0,-90,-78,69,-23,-57, -23,-16,5,-88,-64,56,58,46, -35,82,54,31,23,25,-11,-27, -5,104,1,-39,83,-31,-31,26, 34,58,97,-11,-87,-24,-45,-43, 
  /* [7][2][][] */ 24,-48,-58,-20,-69,30,4,111, 110,43,-52,-47,-47,-2,96,24, -40,-40,65,-75,-16,-21,-11,-5, 24,35,43,-48,108,-106,83,58, -16,-26,67,85,69,-37,5,81, -9,-18,24,26,-36,-39,70,17, 15,13,18,76,49,-15,75,-67, -19,-19,10,107,-46,-37,-102,53, 
  /* [7][3][][] */ 11,-33,73,-15,37,-75,-4,18, 11,13,59,-1,-11,-66,-45,66, -114,61,22,-27,-77,-83,24,68, 18,36,34,-25,114,-21,4,-82, 87,-93,-6,-56,-81,-20,-38,103, -6,27,1,-57,-9,-63,0,14, -5,-9,5,82,47,14,-57,114, -45,-66,-11,48,-19,-79,-76,-23, 
  /* [7][4][][] */ -24,-59,5,-51,-96,-60,15,64, 75,-74,-91,-6,32,23,33,-23, 73,32,-25,-79,32,52,-24,-32, 94,-35,-13,-19,-30,15,-22,55, -28,-1,-35,-54,97,-46,14,34, -37,0,-53,-29,89,34,98,76, -96,-33,70,36,115,3,56,-39, -4,-35,-10,-64,-1,-11,8,23, 
  /* [7][5][][] */ -32,23,-23,64,72,21,-5,30, -47,-6,16,18,-47,31,1,-40, 33,51,-10,-113,36,100,-76,-15, 17,26,14,-59,1,4,57,50, -20,38,67,70,7,78,82,-24, 25,7,11,11,-22,-63,-90,43, -32,70,34,8,70,-46,46,0, -34,61,-2,-18,74,-54,84,38, 
  /* [7][6][][] */ 4,-23,25,-37,-9,48,-19,99, 72,-11,-33,8,-47,3,-45,-43, 16,-43,44,-31,-14,-27,55,29, 74,-52,-69,114,13,3,20,-70, 31,-55,100,-25,127,18,47,16, 47,84,-30,40,1,11,-9,-16, 60,1,10,-13,11,-51,13,-13, 61,17,-40,15,66,-67,-9,100, 
  /* [7][7][][] */ -70,95,27,-86,-19,61,-80,14, 45,-110,-34,38,28,-51,3,47, -48,-95,7,91,28,-86,-42,45, -27,28,25,-46,0,-96,-45,28, 13,51,-35,25,42,-57,63,-47, -3,13,-99,12,59,-72,-24,76, 58,102,-43,42,71,-4,6,93, 31,63,57,29,-6,-50,-84,-35, 
  /* [7][8][][] */ 83,-38,-19,6,-19,-90,-20,-25, -5,0,63,-40,75,36,58,-34, 20,-76,4,-29,-22,27,-98,-12, 47,66,77,65,-42,15,37,-40, 83,37,-60,-53,46,-68,-8,-21, 62,63,-53,8,-84,-5,22,-30, 16,-95,-18,-5,-46,39,95,79, -22,21,-21,20,-97,-72,0,-64, 
  /* [7][9][][] */ 18,-31,-43,27,47,45,-28,-42, -30,-63,-35,-19,55,3,-56,-82, -3,71,-65,-50,30,13,77,-13, 71,-50,0,109,-36,-20,-36,-56, -81,3,50,-17,-11,108,19,-76, -64,-68,-37,-35,31,-45,-24,-104, -63,-47,33,29,42,-10,41,78, -52,-2,-76,-84,-120,14,56,-82, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,10,8,8 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0003693245816975832, 0.00015699662617407739, 0.00021829585602972656, 0.0002023964625550434, 0.00020997121464461088, 0.00021620828192681074, 0.00015649564738851041, 0.00017224242037627846, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfLiteReshapeParams opdata0 = { { -1, 49, 40, 1, 0, 0, 0, 0, }, 4 };
const TfArray<2, int> inputs0 = { 2, { 5,7 } };
const TfArray<1, int> outputs0 = { 1, { 6 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 2,2, 8, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 6,10,1 } };
const TfArray<1, int> outputs1 = { 1, { 3 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 8,8, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 3,12,0 } };
const TfArray<1, int> outputs2 = { 1, { 4 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 4,9,2 } };
const TfArray<1, int> outputs3 = { 1, { 8 } };
const TfLiteSoftmaxParams opdata4 = { 1 };
const TfArray<1, int> inputs4 = { 1, { 8 } };
const TfArray<1, int> outputs4 = { 1, { 11 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteInt32, (void*)tensor_data0, (TfLiteIntArray*)&tensor_dimension0, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension3, 4000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteInt8, tensor_arena + 4000, (TfLiteIntArray*)&tensor_dimension4, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension5, 1960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteInt8, tensor_arena + 4000, (TfLiteIntArray*)&tensor_dimension6, 1960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension8, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension11, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 5120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_SOFTMAX, },
};
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes) {
  static uint8_t *AllocPtr = tensor_arena + sizeof(tensor_arena);

  AllocPtr -= bytes;
  return AllocPtr;
}

static TfLiteEvalTensor *GetEvalTensor(const struct TfLiteContext *context,
                                       int tensor_idx) {
  return &evalTensors[tensor_idx];
}
} // namespace

TfLiteStatus micro_speech_init() {
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 13;
  for(size_t i = 0; i < 13; ++i) {
    tflTensors[i].data.data = tensorData[i].data;
    evalTensors[i].data.data = tensorData[i].data;
    tflTensors[i].type = tensorData[i].type;
    evalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    evalTensors[i].dims = tensorData[i].dims;
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
  }
  registrations[OP_RESHAPE] = tflite::ops::micro::Register_RESHAPE();
  registrations[OP_DEPTHWISE_CONV_2D] = tflite::ops::micro::Register_DEPTHWISE_CONV_2D();
  registrations[OP_CONV_2D] = tflite::ops::micro::Register_CONV_2D();
  registrations[OP_FULLY_CONNECTED] = tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  5, 
};
TfLiteTensor* micro_speech_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  11, 
};
TfLiteTensor* micro_speech_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus micro_speech_invoke() {
  for(size_t i = 0; i < 5; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}
